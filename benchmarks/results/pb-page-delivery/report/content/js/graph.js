/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 13.0, "minX": 0.0, "maxY": 3842.0, "series": [{"data": [[0.0, 13.0], [0.1, 18.0], [0.2, 19.0], [0.3, 21.0], [0.4, 22.0], [0.5, 24.0], [0.6, 25.0], [0.7, 26.0], [0.8, 28.0], [0.9, 29.0], [1.0, 30.0], [1.1, 31.0], [1.2, 32.0], [1.3, 32.0], [1.4, 33.0], [1.5, 34.0], [1.6, 34.0], [1.7, 35.0], [1.8, 35.0], [1.9, 35.0], [2.0, 36.0], [2.1, 36.0], [2.2, 37.0], [2.3, 37.0], [2.4, 38.0], [2.5, 38.0], [2.6, 39.0], [2.7, 39.0], [2.8, 40.0], [2.9, 40.0], [3.0, 40.0], [3.1, 41.0], [3.2, 41.0], [3.3, 42.0], [3.4, 42.0], [3.5, 43.0], [3.6, 43.0], [3.7, 44.0], [3.8, 44.0], [3.9, 45.0], [4.0, 45.0], [4.1, 46.0], [4.2, 46.0], [4.3, 47.0], [4.4, 47.0], [4.5, 48.0], [4.6, 48.0], [4.7, 49.0], [4.8, 49.0], [4.9, 50.0], [5.0, 50.0], [5.1, 51.0], [5.2, 51.0], [5.3, 52.0], [5.4, 52.0], [5.5, 53.0], [5.6, 53.0], [5.7, 54.0], [5.8, 54.0], [5.9, 55.0], [6.0, 55.0], [6.1, 56.0], [6.2, 56.0], [6.3, 57.0], [6.4, 57.0], [6.5, 58.0], [6.6, 58.0], [6.7, 59.0], [6.8, 59.0], [6.9, 60.0], [7.0, 60.0], [7.1, 61.0], [7.2, 62.0], [7.3, 62.0], [7.4, 63.0], [7.5, 63.0], [7.6, 64.0], [7.7, 64.0], [7.8, 65.0], [7.9, 65.0], [8.0, 66.0], [8.1, 66.0], [8.2, 67.0], [8.3, 67.0], [8.4, 68.0], [8.5, 68.0], [8.6, 69.0], [8.7, 70.0], [8.8, 70.0], [8.9, 71.0], [9.0, 72.0], [9.1, 72.0], [9.2, 73.0], [9.3, 74.0], [9.4, 74.0], [9.5, 75.0], [9.6, 75.0], [9.7, 76.0], [9.8, 77.0], [9.9, 77.0], [10.0, 78.0], [10.1, 79.0], [10.2, 79.0], [10.3, 80.0], [10.4, 81.0], [10.5, 81.0], [10.6, 82.0], [10.7, 83.0], [10.8, 83.0], [10.9, 84.0], [11.0, 85.0], [11.1, 85.0], [11.2, 86.0], [11.3, 87.0], [11.4, 87.0], [11.5, 88.0], [11.6, 89.0], [11.7, 89.0], [11.8, 90.0], [11.9, 91.0], [12.0, 91.0], [12.1, 92.0], [12.2, 93.0], [12.3, 93.0], [12.4, 94.0], [12.5, 95.0], [12.6, 96.0], [12.7, 96.0], [12.8, 97.0], [12.9, 98.0], [13.0, 98.0], [13.1, 99.0], [13.2, 100.0], [13.3, 100.0], [13.4, 101.0], [13.5, 102.0], [13.6, 103.0], [13.7, 103.0], [13.8, 104.0], [13.9, 105.0], [14.0, 105.0], [14.1, 106.0], [14.2, 107.0], [14.3, 108.0], [14.4, 108.0], [14.5, 109.0], [14.6, 110.0], [14.7, 110.0], [14.8, 111.0], [14.9, 112.0], [15.0, 113.0], [15.1, 113.0], [15.2, 114.0], [15.3, 115.0], [15.4, 115.0], [15.5, 116.0], [15.6, 117.0], [15.7, 118.0], [15.8, 118.0], [15.9, 119.0], [16.0, 120.0], [16.1, 121.0], [16.2, 122.0], [16.3, 122.0], [16.4, 123.0], [16.5, 124.0], [16.6, 125.0], [16.7, 126.0], [16.8, 126.0], [16.9, 127.0], [17.0, 128.0], [17.1, 128.0], [17.2, 129.0], [17.3, 130.0], [17.4, 131.0], [17.5, 132.0], [17.6, 132.0], [17.7, 133.0], [17.8, 134.0], [17.9, 135.0], [18.0, 136.0], [18.1, 136.0], [18.2, 137.0], [18.3, 138.0], [18.4, 139.0], [18.5, 140.0], [18.6, 140.0], [18.7, 141.0], [18.8, 142.0], [18.9, 143.0], [19.0, 143.0], [19.1, 144.0], [19.2, 145.0], [19.3, 146.0], [19.4, 147.0], [19.5, 148.0], [19.6, 148.0], [19.7, 149.0], [19.8, 150.0], [19.9, 151.0], [20.0, 152.0], [20.1, 152.0], [20.2, 153.0], [20.3, 154.0], [20.4, 155.0], [20.5, 155.0], [20.6, 156.0], [20.7, 157.0], [20.8, 158.0], [20.9, 159.0], [21.0, 160.0], [21.1, 160.0], [21.2, 161.0], [21.3, 162.0], [21.4, 163.0], [21.5, 164.0], [21.6, 164.0], [21.7, 165.0], [21.8, 166.0], [21.9, 167.0], [22.0, 168.0], [22.1, 168.0], [22.2, 169.0], [22.3, 170.0], [22.4, 171.0], [22.5, 172.0], [22.6, 172.0], [22.7, 173.0], [22.8, 174.0], [22.9, 175.0], [23.0, 176.0], [23.1, 177.0], [23.2, 177.0], [23.3, 178.0], [23.4, 179.0], [23.5, 180.0], [23.6, 181.0], [23.7, 182.0], [23.8, 182.0], [23.9, 183.0], [24.0, 184.0], [24.1, 185.0], [24.2, 186.0], [24.3, 187.0], [24.4, 188.0], [24.5, 188.0], [24.6, 189.0], [24.7, 190.0], [24.8, 191.0], [24.9, 192.0], [25.0, 193.0], [25.1, 194.0], [25.2, 194.0], [25.3, 195.0], [25.4, 196.0], [25.5, 197.0], [25.6, 198.0], [25.7, 199.0], [25.8, 199.0], [25.9, 200.0], [26.0, 201.0], [26.1, 202.0], [26.2, 203.0], [26.3, 204.0], [26.4, 204.0], [26.5, 205.0], [26.6, 206.0], [26.7, 207.0], [26.8, 208.0], [26.9, 209.0], [27.0, 209.0], [27.1, 210.0], [27.2, 211.0], [27.3, 212.0], [27.4, 213.0], [27.5, 214.0], [27.6, 215.0], [27.7, 215.0], [27.8, 216.0], [27.9, 217.0], [28.0, 218.0], [28.1, 219.0], [28.2, 220.0], [28.3, 221.0], [28.4, 222.0], [28.5, 222.0], [28.6, 223.0], [28.7, 224.0], [28.8, 225.0], [28.9, 226.0], [29.0, 227.0], [29.1, 228.0], [29.2, 229.0], [29.3, 230.0], [29.4, 231.0], [29.5, 231.0], [29.6, 232.0], [29.7, 233.0], [29.8, 234.0], [29.9, 235.0], [30.0, 236.0], [30.1, 237.0], [30.2, 237.0], [30.3, 238.0], [30.4, 239.0], [30.5, 240.0], [30.6, 241.0], [30.7, 242.0], [30.8, 243.0], [30.9, 244.0], [31.0, 244.0], [31.1, 245.0], [31.2, 246.0], [31.3, 247.0], [31.4, 248.0], [31.5, 249.0], [31.6, 250.0], [31.7, 251.0], [31.8, 252.0], [31.9, 252.0], [32.0, 253.0], [32.1, 254.0], [32.2, 255.0], [32.3, 256.0], [32.4, 257.0], [32.5, 258.0], [32.6, 259.0], [32.7, 260.0], [32.8, 261.0], [32.9, 262.0], [33.0, 263.0], [33.1, 264.0], [33.2, 265.0], [33.3, 266.0], [33.4, 267.0], [33.5, 268.0], [33.6, 268.0], [33.7, 269.0], [33.8, 270.0], [33.9, 271.0], [34.0, 272.0], [34.1, 273.0], [34.2, 274.0], [34.3, 275.0], [34.4, 276.0], [34.5, 277.0], [34.6, 278.0], [34.7, 279.0], [34.8, 280.0], [34.9, 281.0], [35.0, 282.0], [35.1, 282.0], [35.2, 283.0], [35.3, 284.0], [35.4, 285.0], [35.5, 286.0], [35.6, 287.0], [35.7, 288.0], [35.8, 289.0], [35.9, 290.0], [36.0, 291.0], [36.1, 292.0], [36.2, 292.0], [36.3, 293.0], [36.4, 294.0], [36.5, 295.0], [36.6, 296.0], [36.7, 297.0], [36.8, 298.0], [36.9, 299.0], [37.0, 300.0], [37.1, 301.0], [37.2, 302.0], [37.3, 303.0], [37.4, 304.0], [37.5, 305.0], [37.6, 305.0], [37.7, 306.0], [37.8, 307.0], [37.9, 308.0], [38.0, 309.0], [38.1, 310.0], [38.2, 311.0], [38.3, 312.0], [38.4, 313.0], [38.5, 314.0], [38.6, 315.0], [38.7, 315.0], [38.8, 316.0], [38.9, 317.0], [39.0, 318.0], [39.1, 319.0], [39.2, 320.0], [39.3, 321.0], [39.4, 322.0], [39.5, 323.0], [39.6, 324.0], [39.7, 325.0], [39.8, 326.0], [39.9, 327.0], [40.0, 328.0], [40.1, 329.0], [40.2, 329.0], [40.3, 331.0], [40.4, 331.0], [40.5, 332.0], [40.6, 333.0], [40.7, 334.0], [40.8, 335.0], [40.9, 336.0], [41.0, 337.0], [41.1, 338.0], [41.2, 339.0], [41.3, 340.0], [41.4, 341.0], [41.5, 342.0], [41.6, 343.0], [41.7, 344.0], [41.8, 345.0], [41.9, 346.0], [42.0, 347.0], [42.1, 348.0], [42.2, 348.0], [42.3, 350.0], [42.4, 351.0], [42.5, 352.0], [42.6, 353.0], [42.7, 354.0], [42.8, 355.0], [42.9, 356.0], [43.0, 357.0], [43.1, 358.0], [43.2, 358.0], [43.3, 359.0], [43.4, 360.0], [43.5, 361.0], [43.6, 362.0], [43.7, 363.0], [43.8, 364.0], [43.9, 365.0], [44.0, 366.0], [44.1, 367.0], [44.2, 368.0], [44.3, 369.0], [44.4, 370.0], [44.5, 371.0], [44.6, 372.0], [44.7, 373.0], [44.8, 374.0], [44.9, 375.0], [45.0, 376.0], [45.1, 377.0], [45.2, 378.0], [45.3, 379.0], [45.4, 380.0], [45.5, 381.0], [45.6, 382.0], [45.7, 383.0], [45.8, 384.0], [45.9, 385.0], [46.0, 386.0], [46.1, 387.0], [46.2, 388.0], [46.3, 389.0], [46.4, 390.0], [46.5, 391.0], [46.6, 392.0], [46.7, 393.0], [46.8, 394.0], [46.9, 395.0], [47.0, 396.0], [47.1, 397.0], [47.2, 398.0], [47.3, 400.0], [47.4, 401.0], [47.5, 402.0], [47.6, 403.0], [47.7, 404.0], [47.8, 405.0], [47.9, 406.0], [48.0, 407.0], [48.1, 408.0], [48.2, 409.0], [48.3, 410.0], [48.4, 411.0], [48.5, 412.0], [48.6, 413.0], [48.7, 414.0], [48.8, 415.0], [48.9, 417.0], [49.0, 418.0], [49.1, 419.0], [49.2, 420.0], [49.3, 421.0], [49.4, 422.0], [49.5, 423.0], [49.6, 424.0], [49.7, 425.0], [49.8, 426.0], [49.9, 427.0], [50.0, 428.0], [50.1, 429.0], [50.2, 430.0], [50.3, 431.0], [50.4, 432.0], [50.5, 433.0], [50.6, 434.0], [50.7, 435.0], [50.8, 436.0], [50.9, 437.0], [51.0, 439.0], [51.1, 440.0], [51.2, 441.0], [51.3, 442.0], [51.4, 443.0], [51.5, 444.0], [51.6, 445.0], [51.7, 446.0], [51.8, 447.0], [51.9, 448.0], [52.0, 449.0], [52.1, 451.0], [52.2, 452.0], [52.3, 453.0], [52.4, 454.0], [52.5, 455.0], [52.6, 456.0], [52.7, 457.0], [52.8, 458.0], [52.9, 459.0], [53.0, 460.0], [53.1, 461.0], [53.2, 463.0], [53.3, 464.0], [53.4, 465.0], [53.5, 466.0], [53.6, 467.0], [53.7, 468.0], [53.8, 469.0], [53.9, 470.0], [54.0, 471.0], [54.1, 472.0], [54.2, 474.0], [54.3, 475.0], [54.4, 476.0], [54.5, 477.0], [54.6, 478.0], [54.7, 479.0], [54.8, 480.0], [54.9, 481.0], [55.0, 482.0], [55.1, 483.0], [55.2, 484.0], [55.3, 485.0], [55.4, 486.0], [55.5, 488.0], [55.6, 489.0], [55.7, 490.0], [55.8, 491.0], [55.9, 492.0], [56.0, 493.0], [56.1, 494.0], [56.2, 496.0], [56.3, 497.0], [56.4, 498.0], [56.5, 499.0], [56.6, 500.0], [56.7, 501.0], [56.8, 502.0], [56.9, 503.0], [57.0, 504.0], [57.1, 505.0], [57.2, 506.0], [57.3, 507.0], [57.4, 509.0], [57.5, 510.0], [57.6, 511.0], [57.7, 512.0], [57.8, 513.0], [57.9, 514.0], [58.0, 516.0], [58.1, 517.0], [58.2, 518.0], [58.3, 519.0], [58.4, 520.0], [58.5, 521.0], [58.6, 522.0], [58.7, 523.0], [58.8, 524.0], [58.9, 525.0], [59.0, 526.0], [59.1, 528.0], [59.2, 529.0], [59.3, 530.0], [59.4, 531.0], [59.5, 532.0], [59.6, 533.0], [59.7, 535.0], [59.8, 536.0], [59.9, 537.0], [60.0, 538.0], [60.1, 539.0], [60.2, 540.0], [60.3, 542.0], [60.4, 543.0], [60.5, 544.0], [60.6, 545.0], [60.7, 546.0], [60.8, 547.0], [60.9, 549.0], [61.0, 550.0], [61.1, 551.0], [61.2, 552.0], [61.3, 553.0], [61.4, 554.0], [61.5, 556.0], [61.6, 557.0], [61.7, 558.0], [61.8, 559.0], [61.9, 560.0], [62.0, 561.0], [62.1, 562.0], [62.2, 564.0], [62.3, 565.0], [62.4, 566.0], [62.5, 567.0], [62.6, 568.0], [62.7, 569.0], [62.8, 570.0], [62.9, 572.0], [63.0, 573.0], [63.1, 574.0], [63.2, 575.0], [63.3, 576.0], [63.4, 578.0], [63.5, 579.0], [63.6, 580.0], [63.7, 581.0], [63.8, 582.0], [63.9, 584.0], [64.0, 585.0], [64.1, 586.0], [64.2, 587.0], [64.3, 588.0], [64.4, 590.0], [64.5, 591.0], [64.6, 592.0], [64.7, 593.0], [64.8, 595.0], [64.9, 596.0], [65.0, 597.0], [65.1, 599.0], [65.2, 600.0], [65.3, 601.0], [65.4, 602.0], [65.5, 603.0], [65.6, 605.0], [65.7, 606.0], [65.8, 607.0], [65.9, 609.0], [66.0, 610.0], [66.1, 611.0], [66.2, 612.0], [66.3, 613.0], [66.4, 615.0], [66.5, 616.0], [66.6, 617.0], [66.7, 618.0], [66.8, 620.0], [66.9, 621.0], [67.0, 622.0], [67.1, 624.0], [67.2, 625.0], [67.3, 626.0], [67.4, 627.0], [67.5, 629.0], [67.6, 630.0], [67.7, 632.0], [67.8, 633.0], [67.9, 634.0], [68.0, 635.0], [68.1, 637.0], [68.2, 638.0], [68.3, 639.0], [68.4, 641.0], [68.5, 642.0], [68.6, 644.0], [68.7, 645.0], [68.8, 646.0], [68.9, 648.0], [69.0, 649.0], [69.1, 650.0], [69.2, 652.0], [69.3, 653.0], [69.4, 654.0], [69.5, 656.0], [69.6, 657.0], [69.7, 658.0], [69.8, 660.0], [69.9, 661.0], [70.0, 663.0], [70.1, 664.0], [70.2, 665.0], [70.3, 667.0], [70.4, 668.0], [70.5, 670.0], [70.6, 671.0], [70.7, 672.0], [70.8, 674.0], [70.9, 675.0], [71.0, 677.0], [71.1, 678.0], [71.2, 680.0], [71.3, 681.0], [71.4, 683.0], [71.5, 684.0], [71.6, 686.0], [71.7, 687.0], [71.8, 689.0], [71.9, 690.0], [72.0, 691.0], [72.1, 693.0], [72.2, 695.0], [72.3, 696.0], [72.4, 698.0], [72.5, 699.0], [72.6, 700.0], [72.7, 702.0], [72.8, 704.0], [72.9, 705.0], [73.0, 707.0], [73.1, 708.0], [73.2, 710.0], [73.3, 711.0], [73.4, 713.0], [73.5, 714.0], [73.6, 716.0], [73.7, 718.0], [73.8, 719.0], [73.9, 721.0], [74.0, 722.0], [74.1, 724.0], [74.2, 726.0], [74.3, 727.0], [74.4, 729.0], [74.5, 731.0], [74.6, 732.0], [74.7, 734.0], [74.8, 735.0], [74.9, 737.0], [75.0, 739.0], [75.1, 740.0], [75.2, 742.0], [75.3, 744.0], [75.4, 745.0], [75.5, 747.0], [75.6, 749.0], [75.7, 750.0], [75.8, 752.0], [75.9, 753.0], [76.0, 755.0], [76.1, 757.0], [76.2, 758.0], [76.3, 760.0], [76.4, 762.0], [76.5, 763.0], [76.6, 765.0], [76.7, 767.0], [76.8, 769.0], [76.9, 770.0], [77.0, 772.0], [77.1, 774.0], [77.2, 775.0], [77.3, 777.0], [77.4, 779.0], [77.5, 781.0], [77.6, 782.0], [77.7, 784.0], [77.8, 786.0], [77.9, 788.0], [78.0, 790.0], [78.1, 791.0], [78.2, 793.0], [78.3, 795.0], [78.4, 797.0], [78.5, 799.0], [78.6, 801.0], [78.7, 803.0], [78.8, 805.0], [78.9, 807.0], [79.0, 809.0], [79.1, 811.0], [79.2, 812.0], [79.3, 814.0], [79.4, 816.0], [79.5, 818.0], [79.6, 820.0], [79.7, 822.0], [79.8, 824.0], [79.9, 826.0], [80.0, 828.0], [80.1, 830.0], [80.2, 831.0], [80.3, 833.0], [80.4, 835.0], [80.5, 837.0], [80.6, 839.0], [80.7, 841.0], [80.8, 843.0], [80.9, 846.0], [81.0, 848.0], [81.1, 850.0], [81.2, 852.0], [81.3, 854.0], [81.4, 856.0], [81.5, 858.0], [81.6, 860.0], [81.7, 862.0], [81.8, 864.0], [81.9, 866.0], [82.0, 869.0], [82.1, 871.0], [82.2, 873.0], [82.3, 875.0], [82.4, 878.0], [82.5, 880.0], [82.6, 882.0], [82.7, 884.0], [82.8, 886.0], [82.9, 888.0], [83.0, 890.0], [83.1, 893.0], [83.2, 895.0], [83.3, 898.0], [83.4, 900.0], [83.5, 902.0], [83.6, 904.0], [83.7, 907.0], [83.8, 909.0], [83.9, 911.0], [84.0, 913.0], [84.1, 916.0], [84.2, 918.0], [84.3, 920.0], [84.4, 922.0], [84.5, 925.0], [84.6, 927.0], [84.7, 929.0], [84.8, 931.0], [84.9, 934.0], [85.0, 936.0], [85.1, 939.0], [85.2, 941.0], [85.3, 944.0], [85.4, 946.0], [85.5, 949.0], [85.6, 951.0], [85.7, 954.0], [85.8, 956.0], [85.9, 959.0], [86.0, 961.0], [86.1, 964.0], [86.2, 967.0], [86.3, 970.0], [86.4, 972.0], [86.5, 975.0], [86.6, 977.0], [86.7, 980.0], [86.8, 983.0], [86.9, 986.0], [87.0, 988.0], [87.1, 991.0], [87.2, 994.0], [87.3, 996.0], [87.4, 1000.0], [87.5, 1002.0], [87.6, 1005.0], [87.7, 1007.0], [87.8, 1010.0], [87.9, 1013.0], [88.0, 1016.0], [88.1, 1019.0], [88.2, 1021.0], [88.3, 1024.0], [88.4, 1027.0], [88.5, 1030.0], [88.6, 1033.0], [88.7, 1036.0], [88.8, 1039.0], [88.9, 1041.0], [89.0, 1045.0], [89.1, 1048.0], [89.2, 1051.0], [89.3, 1054.0], [89.4, 1057.0], [89.5, 1060.0], [89.6, 1063.0], [89.7, 1066.0], [89.8, 1070.0], [89.9, 1073.0], [90.0, 1076.0], [90.1, 1079.0], [90.2, 1082.0], [90.3, 1086.0], [90.4, 1089.0], [90.5, 1092.0], [90.6, 1096.0], [90.7, 1100.0], [90.8, 1103.0], [90.9, 1107.0], [91.0, 1110.0], [91.1, 1114.0], [91.2, 1118.0], [91.3, 1121.0], [91.4, 1125.0], [91.5, 1128.0], [91.6, 1132.0], [91.7, 1136.0], [91.8, 1140.0], [91.9, 1144.0], [92.0, 1148.0], [92.1, 1152.0], [92.2, 1156.0], [92.3, 1160.0], [92.4, 1164.0], [92.5, 1168.0], [92.6, 1173.0], [92.7, 1178.0], [92.8, 1183.0], [92.9, 1188.0], [93.0, 1192.0], [93.1, 1197.0], [93.2, 1201.0], [93.3, 1206.0], [93.4, 1211.0], [93.5, 1216.0], [93.6, 1220.0], [93.7, 1225.0], [93.8, 1230.0], [93.9, 1235.0], [94.0, 1241.0], [94.1, 1246.0], [94.2, 1251.0], [94.3, 1255.0], [94.4, 1261.0], [94.5, 1266.0], [94.6, 1273.0], [94.7, 1279.0], [94.8, 1285.0], [94.9, 1290.0], [95.0, 1296.0], [95.1, 1302.0], [95.2, 1308.0], [95.3, 1314.0], [95.4, 1320.0], [95.5, 1326.0], [95.6, 1334.0], [95.7, 1341.0], [95.8, 1347.0], [95.9, 1355.0], [96.0, 1362.0], [96.1, 1369.0], [96.2, 1377.0], [96.3, 1385.0], [96.4, 1392.0], [96.5, 1400.0], [96.6, 1407.0], [96.7, 1417.0], [96.8, 1426.0], [96.9, 1434.0], [97.0, 1443.0], [97.1, 1453.0], [97.2, 1462.0], [97.3, 1473.0], [97.4, 1483.0], [97.5, 1494.0], [97.6, 1506.0], [97.7, 1517.0], [97.8, 1528.0], [97.9, 1541.0], [98.0, 1553.0], [98.1, 1566.0], [98.2, 1580.0], [98.3, 1595.0], [98.4, 1611.0], [98.5, 1630.0], [98.6, 1648.0], [98.7, 1669.0], [98.8, 1690.0], [98.9, 1711.0], [99.0, 1734.0], [99.1, 1760.0], [99.2, 1791.0], [99.3, 1821.0], [99.4, 1865.0], [99.5, 1927.0], [99.6, 1992.0], [99.7, 2077.0], [99.8, 2192.0], [99.9, 2418.0], [100.0, 3842.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 29217.0, "series": [{"data": [[0.0, 29217.0], [600.0, 16368.0], [700.0, 13288.0], [800.0, 10784.0], [900.0, 8893.0], [1000.0, 7320.0], [1100.0, 5477.0], [1200.0, 4203.0], [1300.0, 3187.0], [1400.0, 2329.0], [1500.0, 1747.0], [100.0, 28048.0], [1600.0, 1147.0], [1700.0, 847.0], [1800.0, 502.0], [1900.0, 349.0], [2000.0, 248.0], [2100.0, 173.0], [2200.0, 119.0], [2300.0, 76.0], [2400.0, 64.0], [2500.0, 56.0], [2600.0, 35.0], [2800.0, 18.0], [2700.0, 24.0], [2900.0, 14.0], [3000.0, 10.0], [3100.0, 4.0], [200.0, 24716.0], [3200.0, 5.0], [3300.0, 6.0], [3400.0, 1.0], [3500.0, 2.0], [3800.0, 1.0], [300.0, 22945.0], [400.0, 20634.0], [500.0, 19078.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5427.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 125761.0, "series": [{"data": [[0.0, 125761.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 90747.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5427.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 314.16799519327293, "minX": 1.6140912E12, "maxY": 400.0, "series": [{"data": [[1.61409138E12, 400.0], [1.6140912E12, 314.16799519327293], [1.61409126E12, 400.0], [1.61409144E12, 400.0], [1.6140915E12, 395.01769585253504], [1.61409132E12, 400.0]], "isOverall": false, "label": "Page delivery", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6140915E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 72.78260869565217, "minX": 1.0, "maxY": 1088.9935483870966, "series": [{"data": [[2.0, 777.0], [3.0, 929.0], [4.0, 864.0], [5.0, 971.0], [6.0, 509.0], [7.0, 813.0], [11.0, 715.3333333333334], [12.0, 881.5], [13.0, 367.00000000000006], [14.0, 310.5], [15.0, 555.0], [16.0, 216.5], [17.0, 269.7142857142857], [18.0, 216.0], [19.0, 252.4], [20.0, 890.0], [21.0, 215.0], [22.0, 408.4], [23.0, 259.8], [24.0, 521.0], [25.0, 233.0], [26.0, 149.25], [27.0, 72.78260869565217], [28.0, 201.0909090909091], [29.0, 79.18749999999999], [30.0, 251.78571428571428], [31.0, 177.85714285714283], [32.0, 145.65], [33.0, 86.90909090909089], [34.0, 156.7], [35.0, 85.28571428571429], [36.0, 145.19047619047618], [37.0, 164.3076923076923], [38.0, 128.91304347826087], [39.0, 88.24999999999999], [40.0, 224.0625], [41.0, 93.93939393939392], [42.0, 127.66666666666666], [43.0, 163.45833333333334], [44.0, 105.42307692307693], [45.0, 159.76923076923077], [46.0, 132.92592592592592], [47.0, 174.53846153846155], [48.0, 173.66666666666669], [49.0, 143.67647058823528], [50.0, 98.625], [51.0, 140.69230769230768], [52.0, 165.72], [53.0, 103.73333333333332], [54.0, 157.06060606060606], [55.0, 103.57894736842103], [56.0, 341.7142857142857], [57.0, 102.03124999999999], [58.0, 160.86206896551724], [59.0, 96.4090909090909], [60.0, 172.82608695652172], [61.0, 141.49999999999997], [62.0, 146.13793103448276], [63.0, 190.7391304347826], [64.0, 149.36363636363637], [65.0, 166.77777777777777], [66.0, 171.09375], [67.0, 180.4375], [68.0, 139.56521739130434], [69.0, 170.27777777777777], [70.0, 149.75], [71.0, 190.82608695652175], [72.0, 163.89189189189193], [73.0, 120.37837837837834], [74.0, 118.95652173913044], [75.0, 184.86666666666665], [76.0, 177.8], [77.0, 172.20000000000005], [78.0, 119.58333333333334], [79.0, 110.00000000000001], [80.0, 194.71428571428572], [81.0, 198.1], [82.0, 146.34285714285713], [83.0, 153.5], [84.0, 131.93939393939394], [85.0, 163.1176470588236], [86.0, 162.1923076923077], [87.0, 296.0], [88.0, 142.12820512820514], [89.0, 155.66666666666663], [90.0, 204.45454545454547], [91.0, 180.35294117647058], [92.0, 174.6857142857143], [93.0, 146.15686274509804], [94.0, 183.17241379310346], [95.0, 380.3846153846154], [96.0, 135.25], [97.0, 119.25], [98.0, 155.88372093023256], [99.0, 223.22727272727278], [100.0, 141.67857142857144], [101.0, 190.7560975609756], [102.0, 174.9361702127659], [103.0, 145.3529411764706], [104.0, 124.83333333333333], [105.0, 178.25000000000003], [106.0, 181.07317073170734], [107.0, 167.3478260869565], [108.0, 235.32000000000002], [109.0, 153.62068965517238], [111.0, 449.6470588235294], [112.0, 137.3777777777778], [113.0, 258.375], [114.0, 256.04761904761904], [115.0, 192.04999999999998], [116.0, 153.17499999999998], [117.0, 141.80555555555557], [118.0, 222.80952380952377], [119.0, 211.24242424242425], [120.0, 150.82352941176472], [121.0, 189.17948717948715], [122.0, 176.2702702702703], [123.0, 174.4848484848485], [124.0, 188.0909090909091], [125.0, 188.4878048780488], [126.0, 227.47826086956516], [127.0, 194.88888888888886], [128.0, 135.93333333333337], [129.0, 150.90476190476187], [130.0, 210.05882352941174], [131.0, 215.28888888888895], [132.0, 188.32], [133.0, 258.82142857142856], [134.0, 242.00000000000006], [135.0, 265.7666666666667], [136.0, 179.69999999999996], [137.0, 159.26923076923075], [138.0, 220.2608695652174], [139.0, 291.44444444444446], [140.0, 213.05555555555554], [141.0, 185.68852459016384], [142.0, 219.22222222222223], [143.0, 159.13333333333333], [144.0, 152.25], [145.0, 183.3548387096774], [146.0, 426.61111111111103], [147.0, 352.7272727272728], [148.0, 176.66666666666666], [149.0, 216.27659574468095], [150.0, 225.82926829268297], [151.0, 217.47826086956525], [152.0, 181.57894736842104], [153.0, 218.20967741935488], [154.0, 164.61538461538464], [155.0, 245.66666666666666], [156.0, 235.54999999999998], [157.0, 187.51612903225805], [158.0, 245.52777777777774], [159.0, 213.71875000000003], [160.0, 288.64705882352956], [161.0, 259.95454545454544], [162.0, 241.48717948717945], [163.0, 117.45945945945944], [164.0, 222.9591836734694], [165.0, 231.54545454545456], [166.0, 312.9729729729729], [167.0, 278.44186046511635], [168.0, 280.68750000000006], [169.0, 261.2741935483872], [170.0, 300.0769230769231], [171.0, 301.8], [172.0, 123.43902439024387], [173.0, 169.59999999999997], [174.0, 163.31034482758616], [175.0, 178.16129032258067], [176.0, 306.44444444444434], [177.0, 185.29999999999998], [178.0, 180.52380952380955], [179.0, 316.45454545454544], [180.0, 354.775], [181.0, 261.2413793103448], [182.0, 242.63888888888889], [183.0, 219.82608695652172], [184.0, 393.91666666666663], [185.0, 460.01785714285705], [186.0, 323.4042553191489], [187.0, 219.33333333333334], [188.0, 367.5416666666667], [189.0, 279.8695652173913], [190.0, 154.84444444444446], [191.0, 360.7954545454547], [192.0, 433.71428571428567], [193.0, 180.525], [194.0, 241.72000000000003], [195.0, 247.43243243243242], [196.0, 329.00000000000006], [197.0, 285.6451612903226], [198.0, 326.0512820512821], [199.0, 253.6964285714286], [200.0, 242.60000000000002], [201.0, 254.72], [202.0, 381.0731707317073], [203.0, 222.39999999999998], [204.0, 211.95348837209303], [206.0, 440.00000000000006], [207.0, 207.83333333333337], [208.0, 349.40625000000017], [209.0, 237.2666666666667], [210.0, 373.41071428571433], [211.0, 445.3142857142858], [212.0, 353.1875], [213.0, 364.1785714285714], [214.0, 260.90000000000003], [215.0, 270.57142857142856], [216.0, 303.66666666666663], [217.0, 257.21739130434776], [218.0, 252.5348837209302], [219.0, 354.423076923077], [220.0, 217.9787234042553], [221.0, 186.34146341463412], [222.0, 263.67499999999995], [223.0, 202.63636363636365], [224.0, 368.2727272727272], [225.0, 326.9999999999999], [226.0, 288.53488372093017], [227.0, 347.1509433962264], [228.0, 297.1764705882353], [229.0, 508.3333333333333], [230.0, 370.3076923076923], [231.0, 504.0909090909091], [232.0, 294.8500000000001], [233.0, 153.10638297872342], [234.0, 190.72916666666669], [235.0, 386.1086956521739], [236.0, 497.44444444444457], [237.0, 339.87999999999994], [238.0, 379.6976744186046], [239.0, 335.659574468085], [240.0, 305.2765957446809], [241.0, 268.94594594594594], [242.0, 371.9545454545454], [243.0, 338.3461538461538], [244.0, 228.12765957446808], [245.0, 301.06779661016947], [246.0, 224.7857142857143], [247.0, 278.4375], [248.0, 273.8461538461538], [249.0, 545.0833333333335], [250.0, 508.71428571428567], [251.0, 319.48076923076917], [252.0, 187.10714285714286], [253.0, 319.0588235294118], [254.0, 512.4255319148936], [255.0, 562.6585365853658], [257.0, 516.6666666666665], [256.0, 605.542857142857], [258.0, 332.3125], [259.0, 410.7105263157895], [260.0, 294.7647058823529], [261.0, 268.26785714285717], [262.0, 315.5510204081633], [263.0, 375.31428571428563], [264.0, 408.3333333333333], [270.0, 280.01960784313724], [271.0, 393.14285714285705], [268.0, 513.6326530612246], [269.0, 400.53061224489795], [265.0, 260.12903225806457], [266.0, 255.57500000000002], [267.0, 324.34482758620686], [273.0, 453.85416666666663], [272.0, 486.76470588235304], [274.0, 288.6190476190476], [275.0, 274.62500000000006], [276.0, 203.83333333333331], [277.0, 186.10000000000002], [278.0, 269.2553191489362], [279.0, 305.58536585365846], [280.0, 487.125], [286.0, 471.35714285714295], [287.0, 310.0], [284.0, 441.6944444444445], [285.0, 338.1875], [281.0, 616.8157894736843], [282.0, 319.0952380952381], [283.0, 214.83783783783787], [289.0, 113.47826086956522], [288.0, 295.8095238095238], [290.0, 211.92682926829272], [291.0, 286.4666666666668], [292.0, 355.0714285714285], [293.0, 332.0], [294.0, 343.09090909090907], [295.0, 272.57142857142856], [296.0, 229.027027027027], [302.0, 150.60465116279067], [303.0, 141.15217391304347], [300.0, 473.69811320754707], [301.0, 308.30555555555554], [297.0, 274.5581395348837], [298.0, 529.3200000000004], [299.0, 350.3333333333333], [306.0, 322.7325581395349], [304.0, 220.04838709677415], [307.0, 417.93478260869557], [316.0, 409.85365853658544], [317.0, 247.43243243243245], [318.0, 238.31111111111116], [319.0, 360.38095238095246], [308.0, 389.8499999999999], [309.0, 770.5], [310.0, 535.9459459459458], [311.0, 554.6785714285714], [312.0, 523.7755102040816], [313.0, 646.6382978723404], [314.0, 846.1999999999999], [315.0, 742.8571428571429], [321.0, 710.7894736842106], [320.0, 465.0714285714284], [322.0, 1022.5], [323.0, 649.3888888888889], [324.0, 376.70000000000016], [325.0, 255.12903225806454], [326.0, 595.5624999999999], [327.0, 402.42222222222216], [328.0, 504.775], [334.0, 402.125], [335.0, 437.41304347826093], [332.0, 660.8333333333334], [333.0, 565.5409836065576], [329.0, 550.3513513513515], [330.0, 720.0], [331.0, 571.5277777777777], [337.0, 405.83333333333337], [336.0, 382.57142857142856], [338.0, 434.66666666666674], [339.0, 404.08333333333326], [340.0, 464.5652173913043], [341.0, 426.0638297872341], [342.0, 252.21153846153842], [343.0, 223.5454545454546], [344.0, 505.3333333333333], [350.0, 157.46875], [351.0, 201.97777777777776], [348.0, 499.4705882352943], [349.0, 401.9200000000001], [345.0, 300.19999999999993], [346.0, 482.7551020408163], [347.0, 573.875], [353.0, 368.61428571428564], [352.0, 297.12], [354.0, 334.25], [355.0, 174.8], [356.0, 159.34210526315792], [357.0, 175.73913043478262], [358.0, 169.50000000000003], [359.0, 181.8823529411765], [360.0, 311.3870967741935], [366.0, 654.4800000000001], [367.0, 635.3783783783781], [364.0, 614.5882352941178], [365.0, 631.4285714285717], [361.0, 552.5], [362.0, 625.0], [363.0, 757.1739130434783], [369.0, 274.52631578947364], [368.0, 117.66666666666666], [370.0, 420.0588235294117], [371.0, 637.5535714285716], [372.0, 245.22500000000002], [373.0, 531.8541666666666], [374.0, 651.0632911392403], [375.0, 226.33333333333331], [376.0, 423.47058823529414], [382.0, 165.73809523809524], [383.0, 126.8181818181818], [380.0, 267.55555555555554], [381.0, 163.22222222222223], [377.0, 590.64406779661], [378.0, 401.23333333333335], [379.0, 452.9047619047619], [385.0, 705.0], [384.0, 364.74074074074065], [386.0, 671.2222222222223], [387.0, 539.8541666666667], [388.0, 375.5999999999999], [389.0, 824.4], [390.0, 1002.1176470588238], [391.0, 678.3421052631578], [392.0, 612.75], [398.0, 441.7894736842104], [399.0, 1088.9935483870966], [396.0, 1020.9599999999999], [397.0, 570.4666666666667], [393.0, 881.7555555555557], [394.0, 802.8245614035086], [395.0, 780.4038461538461], [400.0, 526.8086850532926], [1.0, 456.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[389.9795796066474, 515.2656904048487]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 400.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 87071.25, "minX": 1.6140912E12, "maxY": 2.056301635E7, "series": [{"data": [[1.61409138E12, 1.924038875E7], [1.6140912E12, 1.106823275E7], [1.61409126E12, 2.056301635E7], [1.61409144E12, 1.9104673883333333E7], [1.6140915E12, 7089993.183333334], [1.61409132E12, 2.030378195E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61409138E12, 236293.45], [1.6140912E12, 133562.75], [1.61409126E12, 248138.35], [1.61409144E12, 234624.25], [1.6140915E12, 87071.25], [1.61409132E12, 247662.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6140915E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 439.7865812136994, "minX": 1.6140912E12, "maxY": 556.3273118279585, "series": [{"data": [[1.61409138E12, 540.7930581655972], [1.6140912E12, 439.7865812136994], [1.61409126E12, 508.08900196201154], [1.61409144E12, 528.4153004218352], [1.6140915E12, 556.3273118279585], [1.61409132E12, 511.9125550851059]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6140915E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 409.83272581614136, "minX": 1.6140912E12, "maxY": 547.1584639016877, "series": [{"data": [[1.61409138E12, 522.4477098286044], [1.6140912E12, 409.83272581614136], [1.61409126E12, 491.2833272245135], [1.61409144E12, 514.8124273172971], [1.6140915E12, 547.1584639016877], [1.61409132E12, 490.0046444310027]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6140915E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 324.6646905667931, "minX": 1.6140912E12, "maxY": 502.8811674347169, "series": [{"data": [[1.61409138E12, 467.8516313084425], [1.6140912E12, 324.6646905667931], [1.61409126E12, 411.3794441689464], [1.61409144E12, 453.52386272944926], [1.6140915E12, 502.8811674347169], [1.61409132E12, 416.37174889829663]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6140915E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 13.0, "minX": 1.6140912E12, "maxY": 3842.0, "series": [{"data": [[1.61409138E12, 3342.0], [1.6140912E12, 3520.0], [1.61409126E12, 3842.0], [1.61409144E12, 3336.0], [1.6140915E12, 3565.0], [1.61409132E12, 3372.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61409138E12, 1191.0], [1.6140912E12, 1168.0], [1.61409126E12, 1053.0], [1.61409144E12, 1079.0], [1.6140915E12, 1172.3999999999996], [1.61409132E12, 1040.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61409138E12, 1770.0], [1.6140912E12, 1893.9700000000048], [1.61409126E12, 1825.9800000000032], [1.61409144E12, 1667.0], [1.6140915E12, 1748.2399999999998], [1.61409132E12, 1765.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61409138E12, 1414.9500000000007], [1.6140912E12, 1425.9500000000007], [1.61409126E12, 1291.0], [1.61409144E12, 1264.0], [1.6140915E12, 1412.0], [1.61409132E12, 1221.9500000000007]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61409138E12, 13.0], [1.6140912E12, 29.0], [1.61409126E12, 30.0], [1.61409144E12, 42.0], [1.6140915E12, 40.0], [1.61409132E12, 15.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61409138E12, 428.5], [1.6140912E12, 361.0], [1.61409126E12, 448.0], [1.61409144E12, 438.0], [1.6140915E12, 437.0], [1.61409132E12, 473.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6140915E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 90.0, "minX": 46.0, "maxY": 766.5, "series": [{"data": [[46.0, 229.0], [362.0, 90.0], [389.0, 637.0], [444.0, 101.5], [542.0, 537.5], [520.0, 261.5], [554.0, 132.0], [557.0, 241.0], [546.0, 766.5], [593.0, 530.0], [605.0, 292.5], [597.0, 348.0], [607.0, 634.5], [596.0, 552.0], [600.0, 372.5], [587.0, 526.0], [580.0, 336.5], [595.0, 214.0], [634.0, 236.0], [610.0, 195.0], [613.0, 425.0], [625.0, 343.0], [636.0, 595.5], [624.0, 487.0], [608.0, 540.0], [617.0, 528.0], [631.0, 619.0], [628.0, 593.0], [633.0, 498.0], [632.0, 550.5], [627.0, 459.0], [623.0, 527.0], [622.0, 358.0], [645.0, 235.0], [641.0, 335.0], [658.0, 241.0], [654.0, 390.5], [640.0, 683.0], [655.0, 513.0], [644.0, 450.5], [670.0, 493.0], [664.0, 474.0], [646.0, 482.0], [668.0, 601.0], [666.0, 536.0], [665.0, 480.0], [656.0, 425.5], [671.0, 584.0], [659.0, 522.5], [642.0, 575.0], [650.0, 414.0], [651.0, 535.0], [687.0, 484.5], [689.0, 452.0], [691.0, 310.0], [685.0, 361.0], [682.0, 484.5], [684.0, 517.0], [683.0, 612.0], [686.0, 452.0], [693.0, 556.0], [694.0, 610.5], [695.0, 488.0], [699.0, 483.0], [697.0, 520.5], [696.0, 438.5], [675.0, 610.0], [673.0, 482.0], [676.0, 444.0], [679.0, 586.0], [700.0, 275.0], [701.0, 535.0], [703.0, 547.0], [680.0, 384.0], [681.0, 531.0], [732.0, 504.5], [721.0, 297.5], [717.0, 241.0], [722.0, 385.5], [727.0, 505.5], [734.0, 489.5], [735.0, 542.0], [719.0, 535.0], [725.0, 384.5], [708.0, 503.0], [730.0, 517.0], [731.0, 489.0], [704.0, 440.0], [705.0, 422.5], [715.0, 504.0], [716.0, 523.0], [741.0, 451.5], [755.0, 333.0], [759.0, 388.0], [739.0, 442.0], [740.0, 492.0], [751.0, 379.5], [745.0, 367.5], [744.0, 380.0], [736.0, 417.0], [752.0, 581.5], [767.0, 300.0], [765.0, 404.0], [764.0, 364.0], [763.0, 388.0], [742.0, 428.5], [761.0, 354.0], [762.0, 285.0], [750.0, 530.0], [749.0, 411.0], [747.0, 441.0], [748.0, 315.0], [770.0, 130.5], [799.0, 412.5], [787.0, 271.0], [791.0, 487.5], [790.0, 520.0], [777.0, 445.0], [778.0, 379.0], [775.0, 449.0], [774.0, 452.0], [772.0, 403.5], [771.0, 294.0], [797.0, 442.0], [796.0, 522.5], [794.0, 403.5], [779.0, 358.0], [783.0, 451.0], [768.0, 422.5], [776.0, 495.0], [784.0, 462.0], [806.0, 504.0], [823.0, 343.0], [808.0, 479.5], [810.0, 371.5], [827.0, 435.0], [830.0, 470.0], [816.0, 260.0], [831.0, 450.0], [819.0, 361.0], [820.0, 447.0], [815.0, 461.0], [821.0, 471.0], [800.0, 433.0], [802.0, 438.0], [805.0, 440.0], [804.0, 329.5], [803.0, 446.0], [814.0, 441.5], [811.0, 411.5], [825.0, 393.5], [824.0, 389.0], [848.0, 342.0], [855.0, 315.0], [839.0, 437.0], [842.0, 413.5], [844.0, 419.0], [843.0, 552.0], [841.0, 380.0], [862.0, 422.0], [861.0, 459.0], [857.0, 367.0], [834.0, 354.0], [833.0, 233.0], [832.0, 404.0], [854.0, 448.0], [863.0, 424.0], [853.0, 429.5], [852.0, 456.0], [850.0, 443.5], [851.0, 456.0], [868.0, 408.0], [864.0, 391.0], [877.0, 388.0], [883.0, 441.0], [888.0, 453.5], [875.0, 421.0], [872.0, 389.5], [871.0, 301.0], [879.0, 483.0], [865.0, 454.0], [866.0, 513.5], [869.0, 328.0], [870.0, 415.0], [902.0, 392.0], [912.0, 338.5], [908.0, 413.5], [906.0, 408.5], [904.0, 356.5], [920.0, 388.5], [909.0, 378.0], [903.0, 398.0], [915.0, 335.0], [900.0, 378.5], [947.0, 413.0], [951.0, 380.0], [934.0, 332.0], [965.0, 332.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 965.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 80.0, "minX": 46.0, "maxY": 706.5, "series": [{"data": [[46.0, 223.5], [362.0, 80.0], [389.0, 624.0], [444.0, 95.0], [542.0, 397.0], [520.0, 256.0], [554.0, 126.0], [557.0, 222.0], [546.0, 706.5], [593.0, 524.5], [605.0, 276.0], [597.0, 315.0], [607.0, 625.5], [596.0, 536.0], [600.0, 367.0], [587.0, 514.0], [580.0, 332.5], [595.0, 194.0], [634.0, 231.5], [610.0, 186.5], [613.0, 419.0], [625.0, 305.0], [636.0, 589.5], [624.0, 483.0], [608.0, 534.5], [617.0, 520.0], [631.0, 594.0], [628.0, 582.5], [633.0, 488.0], [632.0, 546.0], [627.0, 446.0], [623.0, 516.0], [622.0, 351.5], [645.0, 216.0], [641.0, 322.0], [658.0, 218.5], [654.0, 324.5], [640.0, 675.0], [655.0, 497.0], [644.0, 445.5], [670.0, 481.5], [664.0, 456.5], [646.0, 470.5], [668.0, 555.5], [666.0, 533.0], [665.0, 463.0], [656.0, 404.5], [671.0, 576.0], [659.0, 513.5], [642.0, 568.5], [650.0, 394.0], [651.0, 526.0], [687.0, 472.5], [689.0, 430.0], [691.0, 294.0], [685.0, 341.0], [682.0, 481.0], [684.0, 513.0], [683.0, 590.0], [686.0, 399.0], [693.0, 542.0], [694.0, 593.0], [695.0, 474.0], [699.0, 475.0], [697.0, 485.5], [696.0, 409.5], [675.0, 590.0], [673.0, 463.0], [676.0, 436.0], [679.0, 579.0], [700.0, 265.0], [701.0, 525.0], [703.0, 532.0], [680.0, 373.0], [681.0, 522.0], [732.0, 483.0], [721.0, 282.5], [717.0, 217.0], [722.0, 363.0], [727.0, 455.0], [734.0, 467.5], [735.0, 535.0], [719.0, 532.0], [725.0, 377.5], [708.0, 489.0], [730.0, 507.0], [731.0, 471.0], [704.0, 431.5], [705.0, 400.5], [715.0, 489.0], [716.0, 506.0], [741.0, 433.5], [755.0, 318.0], [759.0, 370.0], [739.0, 410.0], [740.0, 472.5], [751.0, 371.0], [745.0, 362.0], [744.0, 346.0], [736.0, 391.5], [752.0, 562.5], [767.0, 277.0], [765.0, 389.0], [764.0, 345.0], [763.0, 383.0], [742.0, 418.0], [761.0, 344.0], [762.0, 281.5], [750.0, 525.5], [749.0, 399.0], [747.0, 422.5], [748.0, 303.5], [770.0, 119.0], [799.0, 396.0], [787.0, 263.0], [791.0, 444.0], [790.0, 505.0], [777.0, 432.0], [778.0, 373.5], [775.0, 414.0], [774.0, 421.5], [772.0, 396.0], [771.0, 290.0], [797.0, 433.0], [796.0, 510.0], [794.0, 370.5], [779.0, 319.5], [783.0, 442.0], [768.0, 409.5], [776.0, 441.0], [784.0, 443.0], [806.0, 495.5], [823.0, 322.0], [808.0, 469.0], [810.0, 354.0], [827.0, 410.0], [830.0, 451.5], [816.0, 251.0], [831.0, 427.0], [819.0, 327.0], [820.0, 443.0], [815.0, 441.0], [821.0, 452.0], [800.0, 411.0], [802.0, 413.0], [805.0, 408.0], [804.0, 297.0], [803.0, 430.5], [814.0, 432.5], [811.0, 376.0], [825.0, 384.0], [824.0, 375.5], [848.0, 331.5], [855.0, 301.0], [839.0, 405.5], [842.0, 402.5], [844.0, 402.5], [843.0, 503.0], [841.0, 370.0], [862.0, 414.5], [861.0, 441.0], [857.0, 358.0], [834.0, 338.5], [833.0, 227.0], [832.0, 389.0], [854.0, 427.5], [863.0, 415.0], [853.0, 388.0], [852.0, 428.0], [850.0, 420.0], [851.0, 440.0], [868.0, 383.5], [864.0, 358.5], [877.0, 369.0], [883.0, 411.0], [888.0, 429.0], [875.0, 405.0], [872.0, 376.5], [871.0, 294.0], [879.0, 481.0], [865.0, 443.0], [866.0, 494.0], [869.0, 294.0], [870.0, 399.0], [902.0, 315.5], [912.0, 327.5], [908.0, 400.5], [906.0, 390.0], [904.0, 342.0], [920.0, 377.0], [909.0, 363.0], [903.0, 377.5], [915.0, 327.0], [900.0, 357.5], [947.0, 371.0], [951.0, 371.0], [934.0, 321.0], [965.0, 323.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 965.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 264.5833333333333, "minX": 1.6140912E12, "maxY": 773.0333333333333, "series": [{"data": [[1.61409138E12, 736.1333333333333], [1.6140912E12, 422.73333333333335], [1.61409126E12, 773.0333333333333], [1.61409144E12, 730.9166666666666], [1.6140915E12, 264.5833333333333], [1.61409132E12, 771.5166666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6140915E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 271.25, "minX": 1.6140912E12, "maxY": 773.0166666666667, "series": [{"data": [[1.61409138E12, 736.1166666666667], [1.6140912E12, 416.0833333333333], [1.61409126E12, 773.0166666666667], [1.61409144E12, 730.9166666666666], [1.6140915E12, 271.25], [1.61409132E12, 771.5333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6140915E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 271.25, "minX": 1.6140912E12, "maxY": 773.0166666666667, "series": [{"data": [[1.61409138E12, 736.1166666666667], [1.6140912E12, 416.0833333333333], [1.61409126E12, 773.0166666666667], [1.61409144E12, 730.9166666666666], [1.6140915E12, 271.25], [1.61409132E12, 771.5333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6140915E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 271.25, "minX": 1.6140912E12, "maxY": 773.0166666666667, "series": [{"data": [[1.61409138E12, 736.1166666666667], [1.6140912E12, 416.0833333333333], [1.61409126E12, 773.0166666666667], [1.61409144E12, 730.9166666666666], [1.6140915E12, 271.25], [1.61409132E12, 771.5333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6140915E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

